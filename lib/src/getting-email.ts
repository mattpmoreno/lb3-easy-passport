import {LoopBackApplication} from "loopback";
import {packageName} from "./global.constants";
import {ObjectID} from "./util";

/**
 * @function
 * @description
 * Gets email address from third-party authentication information
 * @param app {LoopBackApplication} the applicable loopback application
 * @param nameOfIdentityModel {string} name of the user model's associated identity model
 * @param userId {string} the current user's ID as generated by the third-party auth method
 * @return {}
**/
export async function getEmailFromSocialLogin(
  app: LoopBackApplication, nameOfIdentityModel: string, userId: string
): Promise<string> {
  // Double check that name of identity model works
  // @ts-ignore Loopback typing is a little off here, you can access using property
  if (!app.models[nameOfIdentityModel]) {
    throw packageName + ': could not find user identity model: ' + nameOfIdentityModel;
  }
  // Need to go get the social media profile information
  // @ts-ignore Loopback typing is a little off here, you can access using property
  let userIdentity = await app.models[nameOfIdentityModel].findOne({
    where: {userId: ObjectID(userId)}
  });
  // Depending on the provider, we might have different field names
  if (
    userIdentity.provider === 'google' ||
    userIdentity.provider === 'facebook'
  ) {
    // Getting real email is the same for google and facebook
    return userIdentity.profile.emails[0].value;
  } else {
    // TODO needs to be extended to other third-party auth providers
    throw packageName + ': trying to get email from unknown third-party auth provider, submit a pull request :)';
  }
}